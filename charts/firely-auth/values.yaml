# Default values for firely-auth server.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Add you annotations to the deployment here
deployment:
  annotations: {}

# Put here the contents of appsettings.json
appsettings: 
  {
  } 

# Put here the contents of logsettings.json
logsettings:
  {
  }

license:
  secretName: #
  fileName: firely-auth-license.json
  value: # a valid license
  mountPath: /var/run/license # the path where the license file is mounted
  mountedFromExtraVolumes: false # if true, the license file is mounted from an extra volume


# The name of a secret in the same kubernetes namespace which contains values to
# be added to the environment (must be manually created)
# This can be useful for connection strings, etc.
# For example, run the following to create a secret containing a connection string for MSSQL: 
# kubectl create secret generic -n ${FA_NAMESPACE} fa-env-secret  --from-literal=FIRELY_AUTH_UserStore__SqlServer__ConnectionString='User Id=fauser;...'
envFromSecret: ""

# An array of environment variables expressed as key-value pair, name and value, to add to the container
extraEnvs: []

## Custom volumes
extraVolumes: []
#   - name: keyvault-secrets-store
#     csi:
#       driver: secrets-store.csi.k8s.io
#       readOnly: true
#       volumeAttributes:
#         secretProviderClass: "firely-keyvault"

## Custom volume mounts
extraMountPoints: []
#   - name: keyvault-secrets-store
#     mountPath: /mnt/keyvault_secrets_store
#     readOnly: true


replicaCount: 1

image:
  repository: firely/auth
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

containerPort: 8080

podSecurityContext: 
  # fsGroup: 2000

securityContext: 
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: nginx
  annotations: {}
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

persistence:
   enabled: false
#   existingPVClaim:

# Readiness probe
readinessProbe:
  httpGet:
    path: /
    port: http
  initialDelaySeconds: 15
  timeoutSeconds: 5
  failureThreshold: 3
  periodSeconds: 30
  successThreshold: 1

# Liveness probe
livenessProbe:
  httpGet:
    path: /
    port: http
  initialDelaySeconds: 15
  timeoutSeconds: 5
  failureThreshold: 3
  periodSeconds: 120
  successThreshold: 1


resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}
