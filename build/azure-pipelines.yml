# Repo: FirelyTeam/Helm.Charts
# File: build/azure-pipelines.yml

# trigger on the path and branch are set in AzureDevOps (see the UI of the pipeline)

# Used variables: (set in the UI of the pipeline)
# - RELEASE_TAG: pattern of the release tag, like 'refs/tags/FS/v'
# - SOURCE_FOLDER: folder where the helm chart is located, for example './charts/firely-server/'
# - TARGET_SITE: location where the packaged Helm chart can be downloaded, for example 'https://firelyteam.github.io/Helm.Charts/releases'

name: $(date:yyyyMMdd)$(rev:.r)

variables:
  - name: isReleaseTag
    value: $[startsWith(variables['Build.SourceBranch'], variables['RELEASE_TAG'])] #Release tag set in the UI variale e.g. 'refs/tags/FA/v'
  - name: helmVersion
    value: '3.17.0'
  - name: artifactName
    value: 'helm-packages'

pool: 
  vmImage: 'ubuntu-latest'

stages:
- stage: PackageHelmChart
  displayName: 'Package Helm Chart'
  jobs:
    - job: PackageHelmChart
      displayName: 'Package Helm Chart'
      steps:
      - script: |
          # Show defined variables
          echo 'Build.Repository.Provider: $(Build.Repository.Provider)'
          echo 'Build.Repository.LocalPath: $(Build.Repository.LocalPath)'
          echo 'Build.Repository.Name: $(Build.Repository.Name)'  
          echo 'Build.Repository.Uri: $(Build.Repository.Uri)'
          echo 'Build.BuildUri: $(Build.BuildUri)'
          echo 'Build.SourceBranch: $(Build.SourceBranch)'
          echo 'Build.SourceVersion: $(Build.SourceVersion)'
          echo 'Build.SourceBranchName: $(Build.SourceBranchName)'
          echo 'System.DefaultWorkingDirectory: $(System.DefaultWorkingDirectory)'
          echo 'content of $(Build.SourcesDirectory):'
          ls -laR $(Build.SourcesDirectory)/*

          echo 'Build.StagingDirectory: $(Build.StagingDirectory)'
          echo 'Pipeline.Workspace:' $(Pipeline.Workspace)
          echo 'content of $(Pipeline.Workspace):'
          ls -laR $(Pipeline.Workspace)/*

        displayName: Showing defined variables  

      - task: HelmInstaller@1
        displayName: 'Install Helm $(helmVersion)'
        inputs:
          helmVersionToInstall : $(helmVersion)
      
      - script: |
          helm package $(SOURCE_FOLDER) --dependency-update --destination $(Build.ArtifactStagingDirectory)
        displayName: 'helm package'

      - publish: $(Build.ArtifactStagingDirectory)
        artifact: $(artifactName)
        displayName: 'Publish helm package artifact'
      
- stage: DeployHelmPackage
  displayName: 'Deploy Helm Package'
  dependsOn: PackageHelmChart
  condition: eq(variables.isReleaseTag, true) 
  jobs:
    - deployment: DeployHelmPackage
      environment: 'HelmChartsGitHub'
      displayName: 'Deploy Helm Chart'   
      strategy:
        runOnce:
          deploy:   
            steps:
            - script: |
                # Show defined variables
                echo 'Build.Repository.Provider: $(Build.Repository.Provider)'
                echo 'Build.Repository.LocalPath: $(Build.Repository.LocalPath)'
                echo 'Build.Repository.Name: $(Build.Repository.Name)'  
                echo 'Build.Repository.Uri: $(Build.Repository.Uri)'
                echo 'Build.BuildUri: $(Build.BuildUri)'
                echo 'Build.SourceBranch: $(Build.SourceBranch)'
                echo 'Build.SourceVersion: $(Build.SourceVersion)'
                echo 'Build.SourceBranchName: $(Build.SourceBranchName)'
                echo 'System.DefaultWorkingDirectory: $(System.DefaultWorkingDirectory)'
                echo 'content of $(Build.SourcesDirectory):'
                ls -laR $(Build.SourcesDirectory)/*

                echo 'Build.StagingDirectory: $(Build.StagingDirectory)'
                echo 'Pipeline.Workspace:' $(Pipeline.Workspace)
                echo 'content of $(Pipeline.Workspace):'
                ls -laR $(Pipeline.Workspace)/*
              displayName: Showing defined variables  
            - task: HelmInstaller@1
              displayName: 'Install Helm $(helmVersion)'
              inputs:
                helmVersionToInstall: $(helmVersion)
            
            - download: current
              artifact: $(artifactName)
              displayName: 'Download helm package artifact'

            - script: |
                build_source_branch=$(Build.SourceBranch)

                # url encode tag name (like 'FS/v0.20.0' -> 'FS%2Fv0.20.0')
                val=`printf %s ${build_source_branch#'refs/tags/'} | jq -sRr @uri`
                echo 'tag_encoded: ' $val
                echo "##vso[task.setvariable variable=tag_encoded;]$val"

                # release title (chart name and version, like 'firely-server-0.20.0')
                files=($(Pipeline.Workspace)/$(artifactName)/*.tgz)
                val=`basename ${files[0]} .tgz`
                echo 'release_title: ' $val
                echo "##vso[task.setvariable variable=release_title;]$val"

                # create regex of the release tag (like 'refs\/tags\/FS\/v.*')
                release_tag=$(RELEASE_TAG)
                release_tag=`printf %s ${release_tag#'refs/tags/'}`
                val="${release_tag////'\'/}.*"
                echo 'tag_pattern: ' $val
                echo "##vso[task.setvariable variable=tag_pattern;]$val"
              displayName: 'Setting variables'
  
            - script: |
                # download the index.yaml file from https://firelyteam.github.io/Helm.Charts
                curl -sS -o $(Pipeline.Workspace)/current-index.yaml https://firelyteam.github.io/Helm.Charts/index.yaml
                
                # Helm urldecodes the url, so we need to use a placeholder
                placeholder='__TAG__'
                helm repo index $(Pipeline.Workspace)/$(artifactName) --url $(TARGET_SITE)/$placeholder --merge $(Pipeline.Workspace)/current-index.yaml
                # replace the placeholder with the encoded tag
                sed -i "s/$placeholder/$(tag_encoded)/g" $(Pipeline.Workspace)/$(artifactName)/index.yaml
              displayName: 'helm repo index'

            - task: GitHubRelease@1
              displayName: 'GitHub release (create)'  
              inputs:
                gitHubConnection: 'GitHub Helm.Charts release'
                repositoryName: '$(Build.Repository.Name)'
                action: 'create'
                target: '$(Build.SourceVersion)'
                tagSource: gitTag
                tagPattern: '$(tag_pattern)'
                title: '$(release_title)'
                isDraft: true
                addChangeLog: true
                changeLogCompareToRelease: lastNonDraftReleaseByTag
                changeLogCompareToReleaseTag: '$(tag_pattern)'
                changeLogType: commitBased
                assets: '$(Pipeline.Workspace)/$(artifactName)/*.tgz'

            - script: |
                # create pull request for index.yaml
                git config --local user.email ""
                git config --local user.name "Azure DevOps"
                git clone --branch gh-pages
                git checkout -b $BRANCH_NAME
                git add $(Pipeline.Workspace)/$(artifactName)/index.yaml
                git commit -m "Update index.yaml"
                git push origin update-index
                gh pr create --base gh-pages --head "$BRANCH_NAME" --title "Update SUSHI_VERSION to $LATEST_RELEASE" --body "This PR updates the SUSHI_VERSION to $LATEST_RELEASE."
              displayName: 'Create pull request'
              condition: false
              env:
                GITHUB_TOKEN: $(GITHUB_TOKEN)
                BRANCH_NAME: update-index
                LATEST_RELEASE: $(tag_encoded)
                GH_REPO: FirelyTeam/Helm.Charts










        

