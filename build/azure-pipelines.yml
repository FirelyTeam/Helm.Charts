# Repo: FirelyTeam/Helm.Charts
# File: build/azure-pipelines.yml

# trigger on the path and branch are set in AzureDevOps (see the UI of the pipeline)

# Used variables: (set in the UI of the pipeline)
# - RELEASE_TAG: pattern of the release tag, like 'refs/tags/FS/v'
# - SOURCE_FOLDER: folder where the helm chart is located, for example './charts/firely-server/'
# - TARGET_SITE: location where the packaged Helm chart can be downloaded, for example 'https://firelyteam.github.io/Helm.Charts/releases'

name: $(date:yyyyMMdd)$(rev:.r)

variables:
  - name: isReleaseTag
    value: true
    #value: $[startsWith(variables['Build.SourceBranch'], variables['RELEASE_TAG'])] #Release tag set in the UI variale e.g. 'refs/tags/FA/v'
  - name: helmVersion
    value: '3.17.0'
  - name: artifactName
    value: 'helm-packages'

pool: 
  vmImage: 'ubuntu-latest'

stages:
- stage: PackageHelmChart
  displayName: 'Package Helm Chart'
  jobs:
    - job: PackageHelmChart
      displayName: 'Package Helm Chart'
      steps:
      - task: HelmInstaller@1
        displayName: 'Install Helm $(helmVersion)'
        inputs:
          helmVersionToInstall : $(helmVersion)
      
      - script: |
          helm package $(SOURCE_FOLDER) --dependency-update --destination $(Build.ArtifactStagingDirectory)
        displayName: 'helm package'

      - publish: $(Build.ArtifactStagingDirectory)
        artifact: $(artifactName)
        displayName: 'Publish helm package artifact'
      

- stage: DeployHelmPackage
  displayName: 'Deploy Helm Package'
  dependsOn: PackageHelmChart
  condition: eq(variables.isReleaseTag, true) 
  jobs:
    - deployment: DeployHelmPackage
      environment: 'HelmChartsGitHub'
      displayName: 'Deploy Helm Chart'   
      strategy:
        runOnce:
          deploy:   
            steps:
            - task: HelmInstaller@1
              displayName: 'Install Helm $(helmVersion)'
              inputs:
                helmVersionToInstall: $(helmVersion)
            
            - download: current
              artifact: $(artifactName)
              displayName: 'Download helm package artifact'

            - script: |
                # test variables, must be removed in the final version
                build_source_branch='refs/tags/FS/v0.20.0'

                # url encode tag name (like 'FS/v0.20.0' -> 'FS%2Fv0.20.0')
                val=`printf %s ${build_source_branch#'refs/tags/'} | jq -sRr @uri`
                echo 'tag_encoded: ' $val
                echo "##vso[task.setvariable variable=tag_encoded;]$val"

                # release title (chart name and version, like 'firely-server-0.20.0')
                files=($(Pipeline.Workspace)/$(artifactName)/*.tgz)
                val=`basename ${files[0]} .tgz`
                echo 'release_titel: ' $val
                echo "##vso[task.setvariable variable=release_titel;]$val"
              displayName: 'Setting variables'
  
            - script: |
                # download the index.yaml file from https://firelyteam.github.io/Helm.Charts
                curl -sS -o $(Pipeline.Workspace)/current-index.yaml https://firelyteam.github.io/Helm.Charts/index.yaml
                
                # Helm urldecodes the url, so we need to use a placeholder
                placeholder='__TAG__'
                helm repo index $(Pipeline.Workspace)/$(artifactName) --url $(TARGET_SITE)/$(placeholder) --merge $(Pipeline.Workspace)/current-index.yaml
                # replace the placeholder with the encoded tag
                sed -i 's/$(placeholder)/$(tag_encoded)/g' $(Pipeline.Workspace)/$(artifactName)/index.yaml
                cat $(Pipeline.Workspace)/$(artifactName)/index.yaml
              displayName: 'helm repo index'

            - task: GitHubRelease@1
              displayName: 'GitHub release (create)'  
              inputs:
                gitHubConnection: 'GitHub Helm.Charts release'
                repositoryName: '$(Build.Repository.Name)'
                action: 'create'
                target: '$(Build.SourceVersion)'
                tagSource: gitTag
                tagPattern: '$(RELEASE_TAG).*'
                title: '$(release_title)'
                isDraft: true
                changeLogCompareToRelease: lastNonDraftRelease
                changeLogType: issueBased
                changeLogLabels: '[{ "label" : "bug", "displayName" : "Bugfixes", "state" : "closed" },{ "label" : "enhancement", "displayName" : "New Functionality", "state" : "closed" }]'
                assets: '$(Pipeline.Workspace)/*.tgz'












        

